{"ast":null,"code":"/**\n * Creating the displacement map that is used by feDisplacementMap filter.\n * Gradients take into account the radius of the element.\n * This is why they start and end in the middle of the angle curve.\n */\nexport const getDisplacementMap = _ref => {\n  let {\n    height,\n    width,\n    radius,\n    depth\n  } = _ref;\n  return \"data:image/svg+xml;utf8,\" + encodeURIComponent(`<svg height=\"${height}\" width=\"${width}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n    <style>\n        .mix { mix-blend-mode: screen; }\n    </style>\n    <defs>\n        <linearGradient \n          id=\"Y\" \n          x1=\"0\" \n          x2=\"0\" \n          y1=\"${Math.ceil(radius / height * 15)}%\" \n          y2=\"${Math.floor(100 - radius / height * 15)}%\">\n            <stop offset=\"0%\" stop-color=\"#0F0\" />\n            <stop offset=\"100%\" stop-color=\"#000\" />\n        </linearGradient>\n        <linearGradient \n          id=\"X\" \n          x1=\"${Math.ceil(radius / width * 15)}%\" \n          x2=\"${Math.floor(100 - radius / width * 15)}%\"\n          y1=\"0\" \n          y2=\"0\">\n            <stop offset=\"0%\" stop-color=\"#F00\" />\n            <stop offset=\"100%\" stop-color=\"#000\" />\n        </linearGradient>\n    </defs>\n\n    <rect x=\"0\" y=\"0\" height=\"${height}\" width=\"${width}\" fill=\"#808080\" />\n    <g filter=\"blur(2px)\">\n      <rect x=\"0\" y=\"0\" height=\"${height}\" width=\"${width}\" fill=\"#000080\" />\n      <rect\n          x=\"0\"\n          y=\"0\"\n          height=\"${height}\"\n          width=\"${width}\"\n          fill=\"url(#Y)\"\n          class=\"mix\"\n      />\n      <rect\n          x=\"0\"\n          y=\"0\"\n          height=\"${height}\"\n          width=\"${width}\"\n          fill=\"url(#X)\"\n          class=\"mix\"\n      />\n      <rect\n          x=\"${depth}\"\n          y=\"${depth}\"\n          height=\"${height - 2 * depth}\"\n          width=\"${width - 2 * depth}\"\n          fill=\"#808080\"\n          rx=\"${radius}\"\n          ry=\"${radius}\"\n          filter=\"blur(${depth}px)\"\n      />\n    </g>\n</svg>`);\n};","map":{"version":3,"names":["getDisplacementMap","_ref","height","width","radius","depth","encodeURIComponent","Math","ceil","floor"],"sources":["C:/Users/Thomas BDC/source/repos/liquid-glass/src/GlassElement/getDisplacementMap.ts"],"sourcesContent":["import { DisplacementOptions } from \"./getDisplacementFilter\";\n\n/**\n * Creating the displacement map that is used by feDisplacementMap filter.\n * Gradients take into account the radius of the element.\n * This is why they start and end in the middle of the angle curve.\n */\nexport const getDisplacementMap = ({\n  height,\n  width,\n  radius,\n  depth,\n}: Omit<DisplacementOptions, \"chromaticAberration\" | \"strength\">) =>\n  \"data:image/svg+xml;utf8,\" +\n  encodeURIComponent(`<svg height=\"${height}\" width=\"${width}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n    <style>\n        .mix { mix-blend-mode: screen; }\n    </style>\n    <defs>\n        <linearGradient \n          id=\"Y\" \n          x1=\"0\" \n          x2=\"0\" \n          y1=\"${Math.ceil((radius / height) * 15)}%\" \n          y2=\"${Math.floor(100 - (radius / height) * 15)}%\">\n            <stop offset=\"0%\" stop-color=\"#0F0\" />\n            <stop offset=\"100%\" stop-color=\"#000\" />\n        </linearGradient>\n        <linearGradient \n          id=\"X\" \n          x1=\"${Math.ceil((radius / width) * 15)}%\" \n          x2=\"${Math.floor(100 - (radius / width) * 15)}%\"\n          y1=\"0\" \n          y2=\"0\">\n            <stop offset=\"0%\" stop-color=\"#F00\" />\n            <stop offset=\"100%\" stop-color=\"#000\" />\n        </linearGradient>\n    </defs>\n\n    <rect x=\"0\" y=\"0\" height=\"${height}\" width=\"${width}\" fill=\"#808080\" />\n    <g filter=\"blur(2px)\">\n      <rect x=\"0\" y=\"0\" height=\"${height}\" width=\"${width}\" fill=\"#000080\" />\n      <rect\n          x=\"0\"\n          y=\"0\"\n          height=\"${height}\"\n          width=\"${width}\"\n          fill=\"url(#Y)\"\n          class=\"mix\"\n      />\n      <rect\n          x=\"0\"\n          y=\"0\"\n          height=\"${height}\"\n          width=\"${width}\"\n          fill=\"url(#X)\"\n          class=\"mix\"\n      />\n      <rect\n          x=\"${depth}\"\n          y=\"${depth}\"\n          height=\"${height - 2 * depth}\"\n          width=\"${width - 2 * depth}\"\n          fill=\"#808080\"\n          rx=\"${radius}\"\n          ry=\"${radius}\"\n          filter=\"blur(${depth}px)\"\n      />\n    </g>\n</svg>`);\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAGC,IAAA;EAAA,IAAC;IACjCC,MAAM;IACNC,KAAK;IACLC,MAAM;IACNC;EAC6D,CAAC,GAAAJ,IAAA;EAAA,OAC9D,0BAA0B,GAC1BK,kBAAkB,CAAC,gBAAgBJ,MAAM,YAAYC,KAAK,kBAAkBA,KAAK,IAAID,MAAM;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBK,IAAI,CAACC,IAAI,CAAEJ,MAAM,GAAGF,MAAM,GAAI,EAAE,CAAC;AACjD,gBAAgBK,IAAI,CAACE,KAAK,CAAC,GAAG,GAAIL,MAAM,GAAGF,MAAM,GAAI,EAAE,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA,gBAAgBK,IAAI,CAACC,IAAI,CAAEJ,MAAM,GAAGD,KAAK,GAAI,EAAE,CAAC;AAChD,gBAAgBI,IAAI,CAACE,KAAK,CAAC,GAAG,GAAIL,MAAM,GAAGD,KAAK,GAAI,EAAE,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgCD,MAAM,YAAYC,KAAK;AACvD;AACA,kCAAkCD,MAAM,YAAYC,KAAK;AACzD;AACA;AACA;AACA,oBAAoBD,MAAM;AAC1B,mBAAmBC,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoBD,MAAM;AAC1B,mBAAmBC,KAAK;AACxB;AACA;AACA;AACA;AACA,eAAeE,KAAK;AACpB,eAAeA,KAAK;AACpB,oBAAoBH,MAAM,GAAG,CAAC,GAAGG,KAAK;AACtC,mBAAmBF,KAAK,GAAG,CAAC,GAAGE,KAAK;AACpC;AACA,gBAAgBD,MAAM;AACtB,gBAAgBA,MAAM;AACtB,yBAAyBC,KAAK;AAC9B;AACA;AACA,OAAO,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}